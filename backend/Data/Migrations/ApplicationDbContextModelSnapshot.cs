// <auto-generated />
using backend.Data;
using backend.Types;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("backend.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("End");

                    b.Property<DateTime>("Start");

                    b.Property<string>("Title");

                    b.HasKey("EventId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("backend.Models.EventLocation", b =>
<<<<<<< HEAD:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                {
                    b.Property<int>("EventId");
=======
                {
                    b.Property<int>("EventId");

                    b.Property<int>("LocationId");

                    b.HasKey("EventId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.Property<int>("PeopleId");
>>>>>>> origin/master:backend/Migrations/ApplicationDbContextModelSnapshot.cs

                    b.Property<int>("LocationId");

<<<<<<< HEAD:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                    b.HasKey("EventId", "LocationId");

                    b.HasIndex("LocationId");
=======
                    b.HasKey("PeopleId");
>>>>>>> origin/master:backend/Migrations/ApplicationDbContextModelSnapshot.cs

                    b.ToTable("EventLocation");
                });

            modelBuilder.Entity("backend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("LocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("backend.Models.People", b =>
                {
                    b.Property<int>("PeopleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("People");

                    b.HasKey("PeopleId");

                    b.HasIndex("People");

                    b.ToTable("people");
<<<<<<< HEAD:backend/Migrations/ApplicationDbContextModelSnapshot.cs

                    b.HasDiscriminator<string>("Discriminator").HasValue("People");
=======
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("PeopleId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FirstName");

                    b.Property<string>("Infix");

                    b.Property<string>("LastName");

                    b.Property<string>("Locale");

                    b.Property<int>("Role");

                    b.Property<int>("Type");

                    b.HasKey("PeopleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("backend.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
>>>>>>> origin/master:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

<<<<<<< HEAD:backend/Migrations/ApplicationDbContextModelSnapshot.cs
            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.HasBaseType("backend.Models.People");

                    b.Property<string>("Name");

                    b.ToTable("groups");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.HasBaseType("backend.Models.People");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FirstName");

                    b.Property<string>("Infix");

                    b.Property<string>("LastName");

                    b.Property<string>("Locale");

                    b.Property<int>("Role");

                    b.Property<int>("Type");

                    b.ToTable("users");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("backend.Models.EventLocation", b =>
                {
                    b.HasOne("backend.Models.Event", "Event")
                        .WithMany("Locations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

=======
            modelBuilder.Entity("backend.Models.EventLocation", b =>
                {
                    b.HasOne("backend.Models.Event", "Event")
                        .WithMany("Locations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

>>>>>>> origin/master:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                    b.HasOne("backend.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.People", b =>
                {
                    b.HasOne("backend.Models.Event")
                        .WithMany("Peoples")
                        .HasForeignKey("People");

<<<<<<< HEAD:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                    b.HasOne("backend.Models.Group")
                        .WithMany("Peoples")
                        .HasForeignKey("People");
=======
            modelBuilder.Entity("backend.Models.UserGroup", b =>
                {
                    b.HasOne("backend.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
>>>>>>> origin/master:backend/Migrations/ApplicationDbContextModelSnapshot.cs
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
